toGraph$modelLabel = ""
toGraph[toGraph$model == "dummycost",]$modelLabel <- "Baserate only"
toGraph[toGraph$model == "succeedorfail_nobase",]$modelLabel <- "Succeed/Fail"
toGraph[toGraph$model == "succeedorfail",]$modelLabel <- "Succeed/Fail + Baserate"
toGraph[toGraph$model == "informative_nobaserate",]$modelLabel <- "Informative"
toGraph[toGraph$model == "informative_baserate",]$modelLabel <- "Informative + Baserate"
toGraph$modelLabel <- factor(toGraph$modelLabel, levels(modelLabel)[c("Baserate only","Succeed/Fail", "Succeed/Fail + Baserate","Informative",  "Informative + Baserate")])
toGraph$modelLabel <- factor(toGraph$modelLabel, levels(toGraph$modelLabel)[c("Baserate only","Succeed/Fail", "Succeed/Fail + Baserate","Informative",  "Informative + Baserate")])
toGraph <- alldata %>%
group_by(condition, element) %>%
summarise_each(funs(mean)) %>%
gather("model", "prediction", 4:9) %>%
spread("element", "prediction") %>%
select(-halftoCompare) %>%
mutate(Agent = (SO + SV)/(SV + VO + SO)) %>%
mutate(Patient = (VO + SO)/(SV + VO + SO)) %>%
mutate(Verb = (VO + SV)/(SV + VO + SO)) %>%
filter(model != 'human') #leave humans off this graph
### To make the graphs pretty
toGraph[toGraph$Agent == 0,]$Agent <- 0.01 #Make the bars show up!
toGraph[toGraph$Patient == 0,]$Patient <- 0.01
my.cols <- brewer.pal(9, "Purples")
my.cols <- rev(my.cols[4:9])
#pretty labels
trials <- list("1_6","2_5","3_4","4_3","5_2","6_1")
trial_label <- list("1 agent, 6 patients", "2 agents, 5 patients","3 agents, 4 patients","4 agents, 3 patients","5 agents, 2 patients","6 agents, 1 patient")
toGraph$trialLabel <- ""
for (i in 1:6){
toGraph[(toGraph$condition == trials[[i]]),]$trialLabel <- trial_label[[i]]
}
toGraph <- toGraph %>%
gather('Word','prob', 6:8)
toGraph$modelLabel = ""
toGraph[toGraph$model == "dummycost",]$modelLabel <- "Baserate only"
toGraph[toGraph$model == "succeedorfail_nobase",]$modelLabel <- "Succeed/Fail"
toGraph[toGraph$model == "succeedorfail",]$modelLabel <- "Succeed/Fail + Baserate"
toGraph[toGraph$model == "informative_nobaserate",]$modelLabel <- "Informative"
toGraph[toGraph$model == "informative_baserate",]$modelLabel <- "Informative + Baserate"
toGraph$modelLabel <- factor(toGraph$modelLabel, levels(toGraph$modelLabel)[c("Baserate only","Succeed/Fail", "Succeed/Fail + Baserate","Informative",  "Informative + Baserate")])
#Whoops, drop the humans for this graph!
ggplot(data=toGraph, aes(x=Word, y=prob, fill=trialLabel)) +
geom_bar(position=position_dodge(), stat="identity") +
coord_cartesian(ylim=c(0,1)) +
scale_y_continuous(breaks = seq(0, 1, 0.5))+
xlab('') +
ylab('p(include word)') +
theme(legend.key = element_blank()) +
theme(strip.background = element_blank()) +
theme_bw() +
scale_fill_manual(name="", values=my.cols) +
theme(text = element_text(family="Times", size=rel(4))) +
theme(legend.text = element_text(family="Times", size=rel(4))) +
theme(axis.text = element_text(family="Times", size=rel(0.9))) +
facet_grid(. ~ modelLabel) +
theme(strip.text = element_text(family="Times", size=rel(0.9)))
View(toGraph)
toGraph <- alldata %>%
group_by(condition, element) %>%
summarise_each(funs(mean)) %>%
gather("model", "prediction", 4:9) %>%
spread("element", "prediction") %>%
select(-halftoCompare) %>%
mutate(Agent = (SO + SV)/(SV + VO + SO)) %>%
mutate(Patient = (VO + SO)/(SV + VO + SO)) %>%
mutate(Verb = (VO + SV)/(SV + VO + SO)) %>%
filter(model != 'human') #leave humans off this graph
### To make the graphs pretty
toGraph[toGraph$Agent == 0,]$Agent <- 0.01 #Make the bars show up!
toGraph[toGraph$Patient == 0,]$Patient <- 0.01
my.cols <- brewer.pal(9, "Purples")
my.cols <- rev(my.cols[4:9])
#pretty labels
trials <- list("1_6","2_5","3_4","4_3","5_2","6_1")
trial_label <- list("1 agent, 6 patients", "2 agents, 5 patients","3 agents, 4 patients","4 agents, 3 patients","5 agents, 2 patients","6 agents, 1 patient")
toGraph$trialLabel <- ""
for (i in 1:6){
toGraph[(toGraph$condition == trials[[i]]),]$trialLabel <- trial_label[[i]]
}
toGraph <- toGraph %>%
gather('Word','prob', 6:8)
toGraph$modelLabel = ""
toGraph[toGraph$model == "dummycost",]$modelLabel <- "Baserate only"
toGraph[toGraph$model == "succeedorfail_nobase",]$modelLabel <- "Succeed/Fail"
toGraph[toGraph$model == "succeedorfail",]$modelLabel <- "Succeed/Fail + Baserate"
toGraph[toGraph$model == "informative_nobaserate",]$modelLabel <- "Informative"
toGraph[toGraph$model == "informative_baserate",]$modelLabel <- "Informative + Baserate"
toGraph$modelLabel <- factor(toGraph$modelLabel, levels(toGraph$modelLabel)[c("Baserate only","Succeed/Fail", "Succeed/Fail + Baserate","Informative",  "Informative + Baserate")])
View(toGraph)
toGraph$modelLabel = ""
toGraph[toGraph$model == "dummycost",]$modelLabel <- "Baserate only"
toGraph[toGraph$model == "succeedorfail_nobase",]$modelLabel <- "Succeed/Fail"
toGraph[toGraph$model == "succeedorfail",]$modelLabel <- "Succeed/Fail + Baserate"
toGraph[toGraph$model == "informative_nobaserate",]$modelLabel <- "Informative"
toGraph[toGraph$model == "informative_baserate",]$modelLabel <- "Informative + Baserate"
toGraph$modelLabel <- as.factor(toGraph$modelLabel)
tograph$modelLabel <- factor(tograph$modelLabel, levels(toGraph$modelLabel)[c("Baserate only","Succeed/Fail", "Succeed/Fail + Baserate","Informative",  "Informative + Baserate")])
toGraph$modelLabel = ""
toGraph[toGraph$model == "dummycost",]$modelLabel <- "Baserate only"
toGraph[toGraph$model == "succeedorfail_nobase",]$modelLabel <- "Succeed/Fail"
toGraph[toGraph$model == "succeedorfail",]$modelLabel <- "Succeed/Fail + Baserate"
toGraph[toGraph$model == "informative_nobaserate",]$modelLabel <- "Informative"
toGraph[toGraph$model == "informative_baserate",]$modelLabel <- "Informative + Baserate"
toGraph$modelLabel <- as.factor(toGraph$modelLabel)
tograph$modelLabel <- factor(toGraph$modelLabel, levels(toGraph$modelLabel)[c("Baserate only","Succeed/Fail", "Succeed/Fail + Baserate","Informative",  "Informative + Baserate")])
toGraph$modelLabel = ""
toGraph[toGraph$model == "dummycost",]$modelLabel <- "Baserate only"
toGraph[toGraph$model == "succeedorfail_nobase",]$modelLabel <- "Succeed/Fail"
toGraph[toGraph$model == "succeedorfail",]$modelLabel <- "Succeed/Fail + Baserate"
toGraph[toGraph$model == "informative_nobaserate",]$modelLabel <- "Informative"
toGraph[toGraph$model == "informative_baserate",]$modelLabel <- "Informative + Baserate"
toGraph$modelLabel <- as.factor(toGraph$modelLabel)
toGraph$modelLabel <- factor(toGraph$modelLabel, levels(toGraph$modelLabel)[c("Baserate only","Succeed/Fail", "Succeed/Fail + Baserate","Informative",  "Informative + Baserate")])
toGraph$modelLabel
toGraph$modelLabel = ""
toGraph[toGraph$model == "dummycost",]$modelLabel <- "Baserate only"
toGraph[toGraph$model == "succeedorfail_nobase",]$modelLabel <- "Succeed/Fail"
toGraph[toGraph$model == "succeedorfail",]$modelLabel <- "Succeed/Fail + Baserate"
toGraph[toGraph$model == "informative_nobaserate",]$modelLabel <- "Informative"
toGraph[toGraph$model == "informative_baserate",]$modelLabel <- "Informative + Baserate"
toGraph$modelLabel <- as.factor(toGraph$modelLabel)
toGraph$modelLabel
toGraph$modelLabel = ""
toGraph[toGraph$model == "dummycost",]$modelLabel <- "Baserate only"
toGraph[toGraph$model == "succeedorfail_nobase",]$modelLabel <- "Succeed/Fail"
toGraph[toGraph$model == "succeedorfail",]$modelLabel <- "Succeed/Fail + Baserate"
toGraph[toGraph$model == "informative_nobaserate",]$modelLabel <- "Informative"
toGraph[toGraph$model == "informative_baserate",]$modelLabel <- "Informative + Baserate"
toGraph$modelLabel <- as.factor(toGraph$modelLabel)
toGraph$modelLabel <- factor(toGraph$modelLabel,levels(toGraph$modelLabel)[c("Baserate only","Succeed/Fail", "Succeed/Fail + Baserate","Informative",  "Informative + Baserate")])
toGraph$modelLabel
toGraph$modelLabel = ""
toGraph[toGraph$model == "dummycost",]$modelLabel <- "Baserate only"
toGraph[toGraph$model == "succeedorfail_nobase",]$modelLabel <- "Succeed/Fail"
toGraph[toGraph$model == "succeedorfail",]$modelLabel <- "Succeed/Fail + Baserate"
toGraph[toGraph$model == "informative_nobaserate",]$modelLabel <- "Informative"
toGraph[toGraph$model == "informative_baserate",]$modelLabel <- "Informative + Baserate"
toGraph$modelLabel <- as.factor(toGraph$modelLabel)
ggplot(data=toGraph, aes(x=Word, y=prob, fill=trialLabel)) +
geom_bar(position=position_dodge(), stat="identity") +
coord_cartesian(ylim=c(0,1)) +
scale_y_continuous(breaks = seq(0, 1, 0.5))+
xlab('') +
ylab('p(include word)') +
theme(legend.key = element_blank()) +
theme(strip.background = element_blank()) +
theme_bw() +
scale_fill_manual(name="", values=my.cols) +
theme(text = element_text(family="Times", size=rel(4))) +
theme(legend.text = element_text(family="Times", size=rel(4))) +
theme(axis.text = element_text(family="Times", size=rel(0.9))) +
facet_grid(. ~ modelLabel) +
theme(strip.text = element_text(family="Times", size=rel(0.9)))
toGraph$modelLabel <- factor(toGraph$modelLabel,levels(c("Baserate only","Succeed/Fail", "Succeed/Fail + Baserate","Informative",  "Informative + Baserate"))
toGraph$modelLabel
toGraph$modelLabel <- factor(toGraph$modelLabel,levels(c("Baserate only","Succeed/Fail", "Succeed/Fail + Baserate","Informative",  "Informative + Baserate")))
toGraph$modelLabel
toGraph$modelLabel = ""
toGraph[toGraph$model == "dummycost",]$modelLabel <- "Baserate only"
toGraph[toGraph$model == "succeedorfail_nobase",]$modelLabel <- "Succeed/Fail"
toGraph[toGraph$model == "succeedorfail",]$modelLabel <- "Succeed/Fail + Baserate"
toGraph[toGraph$model == "informative_nobaserate",]$modelLabel <- "Informative"
toGraph[toGraph$model == "informative_baserate",]$modelLabel <- "Informative + Baserate"
toGraph$modelLabel <- as.factor(toGraph$modelLabel)
toGraph$modelLabel <- factor(toGraph$modelLabel,levels = c("Baserate only","Succeed/Fail", "Succeed/Fail + Baserate","Informative",  "Informative + Baserate"))
toGraph$modelLabel
ggplot(data=toGraph, aes(x=Word, y=prob, fill=trialLabel)) +
geom_bar(position=position_dodge(), stat="identity") +
coord_cartesian(ylim=c(0,1)) +
scale_y_continuous(breaks = seq(0, 1, 0.5))+
xlab('') +
ylab('p(include word)') +
theme(legend.key = element_blank()) +
theme(strip.background = element_blank()) +
theme_bw() +
scale_fill_manual(name="", values=my.cols) +
theme(text = element_text(family="Times", size=rel(4))) +
theme(legend.text = element_text(family="Times", size=rel(4))) +
theme(axis.text = element_text(family="Times", size=rel(0.9))) +
facet_grid(. ~ modelLabel) +
theme(strip.text = element_text(family="Times", size=rel(0.9)))
toGraph <- alldata %>%
group_by(condition, element) %>%
summarise_each(funs(mean)) %>%
gather("model", "prediction", 4:9) %>%
spread("element", "prediction") %>%
select(-halftoCompare) %>%
mutate(Agent = (SO + SV)/(SV + VO + SO)) %>%
mutate(Patient = (VO + SO)/(SV + VO + SO)) %>%
mutate(Verb = (VO + SV)/(SV + VO + SO)) #%>%
#filter(model != 'human') #leave humans off this graph
### To make the graphs pretty
toGraph[toGraph$Agent == 0,]$Agent <- 0.01 #Make the bars show up!
toGraph[toGraph$Patient == 0,]$Patient <- 0.01
my.cols <- brewer.pal(9, "Purples")
my.cols <- rev(my.cols[4:9])
#pretty labels
trials <- list("1_6","2_5","3_4","4_3","5_2","6_1")
trial_label <- list("1 agent, 6 patients", "2 agents, 5 patients","3 agents, 4 patients","4 agents, 3 patients","5 agents, 2 patients","6 agents, 1 patient")
toGraph$trialLabel <- ""
for (i in 1:6){
toGraph[(toGraph$condition == trials[[i]]),]$trialLabel <- trial_label[[i]]
}
toGraph <- toGraph %>%
gather('Word','prob', 6:8)
toGraph$modelLabel = ""
toGraph[toGraph$model == "dummycost",]$modelLabel <- "Baserate only"
toGraph[toGraph$model == "succeedorfail_nobase",]$modelLabel <- "Succeed/Fail"
toGraph[toGraph$model == "succeedorfail",]$modelLabel <- "Succeed/Fail + Baserate"
toGraph[toGraph$model == "informative_nobaserate",]$modelLabel <- "Informative"
toGraph[toGraph$model == "informative_baserate",]$modelLabel <- "Informative + Baserate"
toGraph$modelLabel <- as.factor(toGraph$modelLabel)
toGraph$modelLabel <- factor(toGraph$modelLabel,levels = c("Baserate only","Succeed/Fail", "Succeed/Fail + Baserate","Informative",  "Informative + Baserate"))
ggplot(data=toGraph, aes(x=Word, y=prob, fill=trialLabel)) +
geom_bar(position=position_dodge(), stat="identity") +
coord_cartesian(ylim=c(0,1)) +
scale_y_continuous(breaks = seq(0, 1, 0.5))+
xlab('') +
ylab('p(include word)') +
theme(legend.key = element_blank()) +
theme(strip.background = element_blank()) +
theme_bw() +
scale_fill_manual(name="", values=my.cols) +
theme(text = element_text(family="Times", size=rel(4))) +
theme(legend.text = element_text(family="Times", size=rel(4))) +
theme(axis.text = element_text(family="Times", size=rel(0.9))) +
facet_grid(. ~ modelLabel) +
theme(strip.text = element_text(family="Times", size=rel(0.9)))
toGraph$modelLabel <- factor(toGraph$modelLabel,levels = c("Baserate only","Succeed/Fail", "Succeed/Fail w/ Cost term","Informative",  "Informative w/ Cost", "Human Performance"))
ggplot(data=toGraph, aes(x=Word, y=prob, fill=trialLabel)) +
geom_bar(position=position_dodge(), stat="identity") +
coord_cartesian(ylim=c(0,1)) +
scale_y_continuous(breaks = seq(0, 1, 0.5))+
xlab('') +
ylab('p(include word)') +
theme(legend.key = element_blank()) +
theme(strip.background = element_blank()) +
theme_bw() +
scale_fill_manual(name="", values=my.cols) +
theme(text = element_text(family="Times", size=rel(4))) +
theme(legend.text = element_text(family="Times", size=rel(4))) +
theme(axis.text = element_text(family="Times", size=rel(0.9))) +
facet_grid(. ~ modelLabel) +
theme(strip.text = element_text(family="Times", size=rel(0.9)))
toGraph <- alldata %>%
group_by(condition, element) %>%
summarise_each(funs(mean)) %>%
gather("model", "prediction", 4:9) %>%
spread("element", "prediction") %>%
select(-halftoCompare) %>%
mutate(Agent = (SO + SV)/(SV + VO + SO)) %>%
mutate(Patient = (VO + SO)/(SV + VO + SO)) %>%
mutate(Verb = (VO + SV)/(SV + VO + SO)) #%>%
#filter(model != 'human') #leave humans off this graph
### To make the graphs pretty
toGraph[toGraph$Agent == 0,]$Agent <- 0.01 #Make the bars show up!
toGraph[toGraph$Patient == 0,]$Patient <- 0.01
my.cols <- brewer.pal(9, "Purples")
my.cols <- rev(my.cols[4:9])
#pretty labels
trials <- list("1_6","2_5","3_4","4_3","5_2","6_1")
trial_label <- list("1 agent, 6 patients", "2 agents, 5 patients","3 agents, 4 patients","4 agents, 3 patients","5 agents, 2 patients","6 agents, 1 patient")
toGraph$trialLabel <- ""
for (i in 1:6){
toGraph[(toGraph$condition == trials[[i]]),]$trialLabel <- trial_label[[i]]
}
toGraph <- toGraph %>%
gather('Word','prob', 6:8)
toGraph$modelLabel = ""
toGraph[toGraph$model == "dummycost",]$modelLabel <- "Baserate only"
toGraph[toGraph$model == "succeedorfail_nobase",]$modelLabel <- "Succeed/Fail"
toGraph[toGraph$model == "succeedorfail",]$modelLabel <- "Succeed/Fail w/ Cost term"
toGraph[toGraph$model == "informative_nobaserate",]$modelLabel <- "Informative"
toGraph[toGraph$model == "informative_baserate",]$modelLabel <- "Informative w/ Cost term"
toGraph[toGraph$model == "human",]$modelLabel <- "Human Performance"
toGraph$modelLabel <- as.factor(toGraph$modelLabel)
toGraph$modelLabel <- factor(toGraph$modelLabel,levels = c("Baserate only","Succeed/Fail", "Succeed/Fail w/ Cost term","Informative",  "Informative w/ Cost term", "Human Performance"))
ggplot(data=toGraph, aes(x=Word, y=prob, fill=trialLabel)) +
geom_bar(position=position_dodge(), stat="identity") +
coord_cartesian(ylim=c(0,1)) +
scale_y_continuous(breaks = seq(0, 1, 0.5))+
xlab('') +
ylab('p(include word)') +
theme(legend.key = element_blank()) +
theme(strip.background = element_blank()) +
theme_bw() +
scale_fill_manual(name="", values=my.cols) +
theme(text = element_text(family="Times", size=rel(4))) +
theme(legend.text = element_text(family="Times", size=rel(4))) +
theme(axis.text = element_text(family="Times", size=rel(0.9))) +
facet_grid(. ~ modelLabel) +
theme(strip.text = element_text(family="Times", size=rel(0.9)))
toGraph$modelLabel = ""
toGraph[toGraph$model == "dummycost",]$modelLabel <- "Baserate only"
toGraph[toGraph$model == "succeedorfail_nobase",]$modelLabel <- "Succeed/Fail"
toGraph[toGraph$model == "succeedorfail",]$modelLabel <- "Succeed/Fail \nw/ Cost term"
toGraph[toGraph$model == "informative_nobaserate",]$modelLabel <- "Informative"
toGraph[toGraph$model == "informative_baserate",]$modelLabel <- "Informative \nw/ Cost term"
toGraph[toGraph$model == "human",]$modelLabel <- "Human Performance"
toGraph$modelLabel <- as.factor(toGraph$modelLabel)
toGraph$modelLabel <- factor(toGraph$modelLabel,levels = c("Baserate only","Succeed/Fail", "Succeed/Fail \nw/ Cost term","Informative",  "Informative \nw/ Cost term", "Human Performance"))
ggplot(data=toGraph, aes(x=Word, y=prob, fill=trialLabel)) +
geom_bar(position=position_dodge(), stat="identity") +
coord_cartesian(ylim=c(0,1)) +
scale_y_continuous(breaks = seq(0, 1, 0.5))+
xlab('') +
ylab('p(include word)') +
theme(legend.key = element_blank()) +
theme(strip.background = element_blank()) +
theme_bw() +
scale_fill_manual(name="", values=my.cols) +
theme(text = element_text(family="Times", size=rel(4))) +
theme(legend.text = element_text(family="Times", size=rel(4))) +
theme(axis.text = element_text(family="Times", size=rel(0.9))) +
facet_grid(. ~ modelLabel) +
theme(strip.text = element_text(family="Times", size=rel(0.9)))
toGraph <- alldata %>%
group_by(condition, element) %>%
summarise_each(funs(mean)) %>%
gather("model", "prediction", 4:9) %>%
spread("element", "prediction") %>%
select(-halftoCompare) %>%
mutate(Agent = (SO + SV)/(SV + VO + SO)) %>%
mutate(Patient = (VO + SO)/(SV + VO + SO)) %>%
mutate(Verb = (VO + SV)/(SV + VO + SO)) #%>%
#filter(model != 'human') #leave humans off this graph
### To make the graphs pretty
toGraph[toGraph$Agent == 0,]$Agent <- 0.01 #Make the bars show up!
toGraph[toGraph$Patient == 0,]$Patient <- 0.01
my.cols <- brewer.pal(9, "Purples")
my.cols <- rev(my.cols[4:9])
#pretty labels
trials <- list("1_6","2_5","3_4","4_3","5_2","6_1")
trial_label <- list("1 agent, 6 patients", "2 agents, 5 patients","3 agents, 4 patients","4 agents, 3 patients","5 agents, 2 patients","6 agents, 1 patient")
toGraph$trialLabel <- ""
for (i in 1:6){
toGraph[(toGraph$condition == trials[[i]]),]$trialLabel <- trial_label[[i]]
}
toGraph <- toGraph %>%
gather('Word','prob', 6:8)
toGraph$modelLabel = ""
toGraph[toGraph$model == "dummycost",]$modelLabel <- "Cost only"
toGraph[toGraph$model == "succeedorfail_nobase",]$modelLabel <- "Succeed/Fail"
toGraph[toGraph$model == "succeedorfail",]$modelLabel <- "Succeed/Fail & Cost"
toGraph[toGraph$model == "informative_nobaserate",]$modelLabel <- "Informative"
toGraph[toGraph$model == "informative_baserate",]$modelLabel <- "Informative & Cost"
toGraph[toGraph$model == "human",]$modelLabel <- "Human Performance"
toGraph$modelLabel <- as.factor(toGraph$modelLabel)
toGraph$modelLabel <- factor(toGraph$modelLabel,levels = c("Cost only","Succeed/Fail", "Succeed/Fail + Cost","Informative",  "Informative + Cost", "Human Performance"))
ggplot(data=toGraph, aes(x=Word, y=prob, fill=trialLabel)) +
geom_bar(position=position_dodge(), stat="identity") +
coord_cartesian(ylim=c(0,1)) +
scale_y_continuous(breaks = seq(0, 1, 0.5))+
xlab('') +
ylab('p(include word)') +
theme(legend.key = element_blank()) +
theme(strip.background = element_blank()) +
theme_bw() +
scale_fill_manual(name="", values=my.cols) +
theme(text = element_text(family="Times", size=rel(4))) +
theme(legend.text = element_text(family="Times", size=rel(4))) +
theme(axis.text = element_text(family="Times", size=rel(0.9))) +
facet_grid(. ~ modelLabel) +
theme(strip.text = element_text(family="Times", size=rel(0.9)))
toGraph <- alldata %>%
group_by(condition, element) %>%
summarise_each(funs(mean)) %>%
gather("model", "prediction", 4:9) %>%
spread("element", "prediction") %>%
select(-halftoCompare) %>%
mutate(Agent = (SO + SV)/(SV + VO + SO)) %>%
mutate(Patient = (VO + SO)/(SV + VO + SO)) %>%
mutate(Verb = (VO + SV)/(SV + VO + SO)) #%>%
#filter(model != 'human') #leave humans off this graph
### To make the graphs pretty
toGraph[toGraph$Agent == 0,]$Agent <- 0.01 #Make the bars show up!
toGraph[toGraph$Patient == 0,]$Patient <- 0.01
my.cols <- brewer.pal(9, "Purples")
my.cols <- rev(my.cols[4:9])
#pretty labels
trials <- list("1_6","2_5","3_4","4_3","5_2","6_1")
trial_label <- list("1 agent, 6 patients", "2 agents, 5 patients","3 agents, 4 patients","4 agents, 3 patients","5 agents, 2 patients","6 agents, 1 patient")
toGraph$trialLabel <- ""
for (i in 1:6){
toGraph[(toGraph$condition == trials[[i]]),]$trialLabel <- trial_label[[i]]
}
toGraph <- toGraph %>%
gather('Word','prob', 6:8)
toGraph$modelLabel = ""
toGraph[toGraph$model == "dummycost",]$modelLabel <- "Cost only"
toGraph[toGraph$model == "succeedorfail_nobase",]$modelLabel <- "Succeed/Fail"
toGraph[toGraph$model == "succeedorfail",]$modelLabel <- "Succeed/Fail & Cost"
toGraph[toGraph$model == "informative_nobaserate",]$modelLabel <- "Informative"
toGraph[toGraph$model == "informative_baserate",]$modelLabel <- "Informative & Cost"
toGraph[toGraph$model == "human",]$modelLabel <- "Human Performance"
toGraph$modelLabel <- as.factor(toGraph$modelLabel)
toGraph$modelLabel <- factor(toGraph$modelLabel,levels = c("Cost only","Succeed/Fail", "Succeed/Fail & Cost","Informative",  "Informative & Cost", "Human Performance"))
ggplot(data=toGraph, aes(x=Word, y=prob, fill=trialLabel)) +
geom_bar(position=position_dodge(), stat="identity") +
coord_cartesian(ylim=c(0,1)) +
scale_y_continuous(breaks = seq(0, 1, 0.5))+
xlab('') +
ylab('p(include word)') +
theme(legend.key = element_blank()) +
theme(strip.background = element_blank()) +
theme_bw() +
scale_fill_manual(name="", values=my.cols) +
theme(text = element_text(family="Times", size=rel(4))) +
theme(legend.text = element_text(family="Times", size=rel(4))) +
theme(axis.text = element_text(family="Times", size=rel(0.9))) +
facet_grid(. ~ modelLabel) +
theme(strip.text = element_text(family="Times", size=rel(0.9)))
toGraph <- alldata %>%
group_by(condition, element) %>%
summarise_each(funs(mean)) %>%
gather("model", "prediction", 4:9) %>%
spread("element", "prediction") %>%
select(-halftoCompare) %>%
mutate(Agent = (SO + SV)/(SV + VO + SO)) %>%
mutate(Patient = (VO + SO)/(SV + VO + SO)) %>%
mutate(Verb = (VO + SV)/(SV + VO + SO)) #%>%
#filter(model != 'human') #leave humans off this graph
### To make the graphs pretty
toGraph[toGraph$Agent == 0,]$Agent <- 0.01 #Make the bars show up!
toGraph[toGraph$Patient == 0,]$Patient <- 0.01
my.cols <- brewer.pal(9, "Purples")
my.cols <- rev(my.cols[4:9])
#pretty labels
trials <- list("1_6","2_5","3_4","4_3","5_2","6_1")
trial_label <- list("1 agent, 6 patients", "2 agents, 5 patients","3 agents, 4 patients","4 agents, 3 patients","5 agents, 2 patients","6 agents, 1 patient")
toGraph$trialLabel <- ""
for (i in 1:6){
toGraph[(toGraph$condition == trials[[i]]),]$trialLabel <- trial_label[[i]]
}
toGraph <- toGraph %>%
gather('Word','prob', 6:8)
toGraph$modelLabel = ""
toGraph[toGraph$model == "dummycost",]$modelLabel <- "Cost only"
toGraph[toGraph$model == "succeedorfail_nobase",]$modelLabel <- "Succeed/Fail"
toGraph[toGraph$model == "succeedorfail",]$modelLabel <- "Succeed/Fail & Cost"
toGraph[toGraph$model == "informative_nobaserate",]$modelLabel <- "Informative"
toGraph[toGraph$model == "informative_baserate",]$modelLabel <- "Informative & Cost"
toGraph[toGraph$model == "human",]$modelLabel <- "Human Performance"
toGraph$modelLabel <- as.factor(toGraph$modelLabel)
toGraph$modelLabel <- factor(toGraph$modelLabel,levels = c("Human Performance", "Cost only","Succeed/Fail", "Succeed/Fail & Cost","Informative",  "Informative & Cost"))
ggplot(data=toGraph, aes(x=Word, y=prob, fill=trialLabel)) +
geom_bar(position=position_dodge(), stat="identity") +
coord_cartesian(ylim=c(0,1)) +
scale_y_continuous(breaks = seq(0, 1, 0.5))+
xlab('') +
ylab('p(include word)') +
theme(legend.key = element_blank()) +
theme(strip.background = element_blank()) +
theme_bw() +
scale_fill_manual(name="", values=my.cols) +
theme(text = element_text(family="Times", size=rel(4))) +
theme(legend.text = element_text(family="Times", size=rel(4))) +
theme(axis.text = element_text(family="Times", size=rel(0.9))) +
facet_grid(. ~ modelLabel) +
theme(strip.text = element_text(family="Times", size=rel(0.9)))
ggsave(filename="allmodels.jpg", width=10, height=4)
#Average all the predictions between halves, then renormalize to
#'likelihood utterance includes X' format we use for the full human dataaset
toGraph <- alldata %>%
group_by(condition, element) %>%
summarise_each(funs(mean)) %>%
gather("model", "prediction", 4:9) %>%
spread("element", "prediction") %>%
select(-halftoCompare) %>%
mutate(Agent = (SO + SV)/(SV + VO + SO)) %>%
mutate(Patient = (VO + SO)/(SV + VO + SO)) %>%
mutate(Verb = (VO + SV)/(SV + VO + SO)) #%>%
#filter(model != 'human') #leave humans off this graph
### To make the graphs pretty
toGraph[toGraph$Agent == 0,]$Agent <- 0.01 #Make the bars show up!
toGraph[toGraph$Patient == 0,]$Patient <- 0.01
my.cols <- brewer.pal(9, "Purples")
my.cols <- rev(my.cols[4:9])
#pretty labels
trials <- list("1_6","2_5","3_4","4_3","5_2","6_1")
trial_label <- list("1 agent, 6 patients", "2 agents, 5 patients","3 agents, 4 patients","4 agents, 3 patients","5 agents, 2 patients","6 agents, 1 patient")
toGraph$trialLabel <- ""
for (i in 1:6){
toGraph[(toGraph$condition == trials[[i]]),]$trialLabel <- trial_label[[i]]
}
toGraph <- toGraph %>%
gather('Word','prob', 6:8)
toGraph$modelLabel = ""
toGraph[toGraph$model == "dummycost",]$modelLabel <- "Cost only"
toGraph[toGraph$model == "succeedorfail_nobase",]$modelLabel <- "Succeed/Fail"
toGraph[toGraph$model == "succeedorfail",]$modelLabel <- "Succeed/Fail & Cost"
toGraph[toGraph$model == "informative_nobaserate",]$modelLabel <- "Informative"
toGraph[toGraph$model == "informative_baserate",]$modelLabel <- "Informative & Cost"
toGraph[toGraph$model == "human",]$modelLabel <- "Human Performance"
toGraph$modelLabel <- as.factor(toGraph$modelLabel)
toGraph$modelLabel <- factor(toGraph$modelLabel,levels = c("Cost only","Succeed/Fail", "Succeed/Fail & Cost","Informative",  "Informative & Cost", "Human Performance"))
ggplot(data=toGraph, aes(x=Word, y=prob, fill=trialLabel)) +
geom_bar(position=position_dodge(), stat="identity") +
coord_cartesian(ylim=c(0,1)) +
scale_y_continuous(breaks = seq(0, 1, 0.5))+
xlab('') +
ylab('p(include word)') +
theme(legend.key = element_blank()) +
theme(strip.background = element_blank()) +
theme_bw() +
scale_fill_manual(name="", values=my.cols) +
theme(text = element_text(family="Times", size=rel(4))) +
theme(legend.text = element_text(family="Times", size=rel(4))) +
theme(axis.text = element_text(family="Times", size=rel(0.9))) +
facet_grid(. ~ modelLabel) +
theme(strip.text = element_text(family="Times", size=rel(0.9)))
ggsave(filename="allmodels.jpg", width=12, height=4)
ggsave(filename="allmodels.jpg", width=13, height=4)
